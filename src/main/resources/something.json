{
  "className": "GeneratorHelper",
  "preTestConfiguration": "EasyRandom easyRandom = new EasyRandom;\nstringVar_0 = easyRandom.nextObject(String.class);\n\nstringVar_1 = easyRandom.nextObject(String.class);\nMapVar_2= Map.of(stringVar_0,stringVar_1);\nstringVar_3 = easyRandom.nextObject(String.class);\n\nstringVar_4 = easyRandom.nextObject(String.class);\nMapVar_5= Map.of(stringVar_3,stringVar_4);",
  "methodList": [
    {
      "methodToBeTested": "generate",
      "methodToBeTestedParameters": [
        "Mockito.anyString()"
      ],
      "mockObjects": {
        "mockObjectList": {
          "resolver.setResolver(sourceCodePath, null)": [
            "resolver.setResolver(Mockito.anyString(),Mockito.any())",
            "doNothing()"
          ],
          "getAllSourceDirJavaFiles(sourceCodePath)": [
            "GeneratorHelper.getAllSourceDirJavaFiles(Mockito.anyString())",
            "MapVar_2"
          ],
          "parseFile.startParsing(new File(entry.getValue()))": [
            "parseFile.startParsing(Mockito.any())",
            "easyRandom.nextObject(Class.forName(returnType));"
          ],
          "if_0": []
        }
      }
    },
    {
      "methodToBeTested": "getAllSourceDirJavaFiles",
      "methodToBeTestedParameters": [
        "Mockito.anyString()"
      ],
      "mockObjects": {
        "mockObjectList": {
          "if_0": [
            "StringUtils.isBlank(sourceCodePath)"
          ]
        }
      }
    },
    {
      "methodToBeTested": "generate",
      "methodToBeTestedParameters": [
        "Mockito.anyString()",
        "Mockito.anyString()"
      ],
      "mockObjects": {
        "mockObjectList": {
          "resolver.setResolver(sourceCodePath, test)": [
            "resolver.setResolver(Mockito.anyString(),Mockito.any())",
            "doNothing()"
          ],
          "parseFile.startParsing(new File(sourceCodePath))": [
            "parseFile.startParsing(Mockito.any())",
            "easyRandom.nextObject(Class.forName(returnType));"
          ]
        }
      }
    }
  ],
  "dependencies": {
    "Resolver": "resolver",
    "ParseFile": "parseFile",
    "SourceCodePathValidator": "sourceCodePathValidator"
  },
  "importStatementList": [
    "com.auto.gen.junit.autoj.dto.TestClassBuilder",
    "com.auto.gen.junit.autoj.parser.ParseFile",
    "com.auto.gen.junit.autoj.type.resolver.Resolver",
    "com.auto.gen.junit.autoj.validator.intf.SourceCodePathValidator",
    "org.apache.commons.lang3.StringUtils",
    "org.springframework.beans.factory.annotation.Autowired",
    "org.springframework.stereotype.Service",
    "java.io.File",
    "java.io.IOException",
    "java.nio.file.Files",
    "java.nio.file.Path",
    "java.util"
  ]
}
